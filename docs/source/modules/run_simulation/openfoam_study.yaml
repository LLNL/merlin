description:
    name: openfoam_study
    description: |
      A parameter study that includes initializing, running,
      post-processing, collecting, learning and vizualizing runs

env:
    variables:
        OUTPUT_PATH: ./running_simulation_output

        N_SAMPLES: 10

study:
    - name: setup
      description: |
                Installing necessary python packages and copying files from SPECROOT
                to the merlin_info directory
      run:
        cmd: |
            pip install -r $(SPECROOT)/requirements.txt

            cp -r $(SPECROOT)/scripts $(MERLIN_INFO)/

            # Setting up the cavity directory in the MERLIN_INFO directory
            source $(MERLIN_INFO)/scripts/cavity_setup.sh $(MERLIN_INFO)

        task_queue: setupworkers

    - name: sim_runs
      description: |
                  Edits the Lidspeed and viscosity then runs OpenFOAM simulation
                  using the icoFoam solver
      run:
        cmd: |
            cp -r $(MERLIN_INFO)/cavity cavity/
            cd cavity

            sed -i '' "18s/.*/nu              [0 2 -1 0 0 0 0] $(VISCOSITY);/" constant/transportProperties
            sed -i '' "26s/.*/        value           uniform ($(LID_SPEED) 0 0);/" 0/U

            cd ..
            cp $(MERLIN_INFO)/scripts/run_openfoam .

            CONTAINER_NAME='OPENFOAM_ICO_$(MERLIN_SAMPLE_ID)'
            docker container run -ti --rm -v $(pwd):/cavity -w /cavity --name=${CONTAINER_NAME} cfdengine/openfoam ./run_openfoam $(LID_SPEED)
            docker wait ${CONTAINER_NAME}
        task_queue: simworkers
        depends: [setup]

    - name: combine_outputs
      description: Combine the outputs of the previous step
      run:
        cmd: |
            python $(MERLIN_INFO)/scripts/combine_outputs.py -data $(sim_runs.workspace) -merlin_paths $(MERLIN_PATHS_ALL)
        task_queue: learnworkers
        depends: [sim_runs_*]

    - name: learn
      description: Learning the output of the openfoam simulations using input parameters
      run:
        cmd: |
            python $(MERLIN_INFO)/scripts/learn.py -specroot $(MERLIN_WORKSPACE)
        task_queue: learnworkers
        depends: [combine_outputs]

merlin:
    resources:
        task_server: celery
        overlap: False
        workers:
            setupworkers:
              args: -l INFO --concurrency 2
              steps: [setup]
            simworkers:
              args: -l INFO --concurrency 10 --prefetch-multiplier 1 -Ofair
              steps: [sim_runs]
            learnworkers:
              args: -l INFO --concurrency 1
              steps: [combine_outputs, learn]
    samples:
        generate:
             cmd: python $(SPECROOT)/scripts/make_samples.py -n $(N_SAMPLES) -outfile=$(MERLIN_INFO)/samples
        file: $(MERLIN_INFO)/samples.npy
        column_labels: [LID_SPEED, VISCOSITY]
        level_max_dirs: 25
